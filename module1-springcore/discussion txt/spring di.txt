intro to spring framework:
---------------------------
Spring is java framework for simplification of sw development
it have many modules

Spring framework:

spring DI
spring AOP
spring jdbc / spring hib/ spring mongo --->  jdbc template
spring MVC
spring security
spring ... so many modules

Why spring boot:
	you have to configure a lots while interate many module with spring
	
Now we have spring boot:
	spring boot = spring - extra config + embedded tomcat + actuator + cloud native support


Agenda Session 3: Spring Dependency Injection 
===============================================

doubts about containers

web server vs application server vs db server vs web container 
spring is also container

Need of Dependency Injection?

loose coupling and high cohesion?

A passanger is traveling using a car



Spring DI using XML
	done
Spring DI using annotation

	they do the same job
	aka meta data for srping to tell what to do
	
	
@Component
@Autowire 
replace lots of xml

spring xml----> annotation
how to force spring to go for annotations?

@Bean vs @Component
these are 2 ways to create bean using annotation
are they same... not


NoUniqueBeanDefinitionException: No qualifying bean of type
 'com.busycoder.demo4.Vehicle' available: expected single matching bean but found 2: car,bike


Spring DI using java configuration
done
spring dependency injection important annotation
done

spring profile:
it allow you to swap the bean impl at run time without changing the code :)
devops: dev, test, pre-prod , prod

NoSuchBeanDefinitionException

spring bean life cycle basics
spring core interview questions

Spring DI bankapplication

3 tier app:

						@Component
						   |
	----------------------------------------------------
	|						|							|
@controller					@Service				@Repository
@RestController

						
web ---------------------- service --------------- dao layer -------------db


transfer the fund
deposit
withdraw

Dto vs entity
used to transfer the data
entity is a object that intact with hib/jpa to fetch data with database



interview questions:
https://github.com/altafjava/spring-interview-questions-answers
https://stackoverflow.com/questions/11316688/inversion-of-control-vs-dependency-injection-with-selected-quotes-is-my-unders
https://stackoverflow.com/questions/6550700/inversion-of-control-vs-dependency-injection

















public interface AccountDao {
    public List<Account> getAll();
    public Account getById(int id);
    public void updateAccount(Account account);
}


public class AccountDaoImplUsingHashMap implements AccountDao{

    private Map<Integer, Account> accounts=new HashMap<>();

    public AccountDaoImplUsingJdbc() {
        accounts.put(1, new Account(1, "raj", 1000.00));
        accounts.put(2, new Account(2, "ekta", 1000.00));
    }
    @Override
    public List<Account> getAll() {
        System.out.println("getAll using using HashMap...");
        return new ArrayList<Account>(accounts.values());
    }

    @Override
    public Account getById(int id) {
        return accounts.get(id);
    }

    @Override
    public void updateAccount(Account account) {
        accounts.put(account.getId(), account);
    }
}

singleton vs prototype
only one	as many object as i calling


jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/busybank
jdbc.username=root
jdbc.password=root
pool.initialSize=10