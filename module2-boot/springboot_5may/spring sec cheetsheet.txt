Agenda :
----------

Spring sec hello world with database:

step 0: create the project with suitable dependency
----------------------------------

step 1: config prop
--------------------------------
spring.datasource.driver-class-name= com.mysql.cj.jdbc.Driver
#spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto= update
spring.datasource.url=jdbc:mysql://localhost:3306/bankappdemo?useSSL=false
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

server.port=8090
server.servlet.context-path=/bankapp


step 1.1: create controller to secure
-------------------------------------

@RestController
public class HelloController {

    @GetMapping(path = "admin")
    public String admin(){
        return "admin";
    }


    @GetMapping(path = "mgr")
    public String mgr(){
        return "mgr";
    }


    @GetMapping(path = "clerk")
    public String clerk(){
        return "clerk";
    }

    @GetMapping(path = "home")
    public String home(){
        return "home";
    }
}

step 2: crate dao and service layer (Spring sec nothing to do with that)
----------------------------------------------------------------------

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity //(name = "user_entity")
@Table(name = "user_entity")
public class UserEntity {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String username;
    private String password;
    private String email;

    @ElementCollection(fetch = FetchType.EAGER)
    @CollectionTable(name = "user_roles")
    private List<String> roles=new ArrayList<>();

    public UserEntity(String username, String password, String email, List<String> roles) {
        this.username = username;
        this.password = password;
        this.email = email;
        this.roles = roles;
    }
}



@Repository
public interface UserRepo extends JpaRepository<UserEntity, Integer> {
    public UserEntity findByUsername(String username);
}


service layer:
public interface UserService {
    public UserEntity findByUsername(String username);
    public void  addUserEntity(UserEntity userEntity);
}

@Service
@Transactional
public class UserServiceImpl implements UserService{

    @Autowired
    private UserRepo userRepo;

    @Override
    public UserEntity findByUsername(String username) {
        return userRepo.findByUsername(username);
    }

    @Override
    public void addUserEntity(UserEntity userEntity) {
        userRepo.save(userEntity);
    }
}


add some user to the application:
---------------------------------
@Bean
	public CommandLineRunner commandLineRunner(){

		return (String... args) ->{
		//String username, String password, String email, List<String> roles
//			userService.addUserEntity(new UserEntity("raj","raj123","raj@gmail.com",
//					List.of("ROLE_ADMIN","ROLE_MGR","ROLE_CLERK")));
//			userService.addUserEntity(new UserEntity("ekta","ekta123","ekta@gmail.com",
//					List.of("ROLE_MGR","ROLE_CLERK")));
//			userService.addUserEntity(new UserEntity("gun","gun123","gun@gmail.com", List.of("ROLE_CLERK")));
		};
	}



step 3: security configuaration (Note: WebSecConfigureAdaptor is removed)
----------------------------------------------------------------
---
@Component
@EnableWebSecurity
public class SecConfig{

    @Autowired
    private DetailService userDetailsService;

    @Bean
    public AuthenticationProvider authenticationProvider(){
        DaoAuthenticationProvider authenticationProvider=new DaoAuthenticationProvider();
        authenticationProvider.setUserDetailsService(userDetailsService);
        authenticationProvider.setPasswordEncoder(passwordEncoder());
        return authenticationProvider;
    }

    @Bean
    public PasswordEncoder passwordEncoder(){
        return NoOpPasswordEncoder.getInstance();
    }

    //authorization
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http)throws Exception{
        http.csrf(AbstractHttpConfigurer::disable)
                .authorizeHttpRequests(
                        registry->
                                registry.requestMatchers("/admin/**").hasAnyRole("ADMIN")
                                .requestMatchers("/mgr/**").hasAnyRole("ADMIN","MGR")
                                .requestMatchers("/clerk/**").hasAnyRole("ADMIN","MGR","CLERK")
                                .requestMatchers("/home/**").permitAll()
                )
                .httpBasic(Customizer.withDefaults())
//                .formLogin(Customizer.withDefaults())
                .sessionManagement(configre->configre.sessionCreationPolicy(SessionCreationPolicy.STATELESS));

        return http.build();
    }


}


step 4: Define userdetail servcice
-------------------------------------

@Service
public class DetailService implements UserDetailsService {

    //spring sec is going to call this method
    @Autowired
    private UserService userService;


    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        UserEntity userEntity=userService.findByUsername(username);
        if(userEntity==null){
            throw new UsernameNotFoundException("username/password is not correct");
        }
        //UserEntity is not understood by spring sec...i need to covert UserEntity to the user that spring sec understand
        return new SecUser(userEntity);
    }
}

step 4: SecUser that convert my user to the user that spring sec understand
-------------------------------------

public class SecUser implements UserDetails {

    private UserEntity userEntity;

    public SecUser(UserEntity userEntity) {
        this.userEntity = userEntity;
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        List<String> roles=userEntity.getRoles();
        return AuthorityUtils.createAuthorityList(roles.toArray(new String[roles.size()]));
    }

    @Override
    public String getPassword() {
        return userEntity.getPassword();
    }

    @Override
    public String getUsername() {
        return userEntity.getUsername();
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}


step 2: 
how security works
Spring security quick recap
spring method level security
JWT security


servers : jboss servers

why spring sec?
	url based sec : filters
	method level sec: aop
	Object level sec: aop
	
	@PostAuthorzied("...")
	Book foo(){
	
	}

Spring security jwt:
-------------------

step 1: put maven dependency
<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>0.11.5</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>0.11.5</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>0.11.5</version>
		</dependency>
		
		
		
		
		@Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {

        String authHeader= request.getHeader("Authorization");
        String token=null;
        String username=null;

            if(authHeader!=null && authHeader.startsWith("Bearer ")){
            token=authHeader.substring(7);
            username=jwtService.extractUsername(token);
        }

        if(username!=null && SecurityContextHolder.getContext().getAuthentication()==null){
            UserDetails userDetails=userDetailsService.loadUserByUsername(username);
            //username is correct , and we are going to get UNAuthToeken and put that in SecurityContextHolder ....
            if(jwtService.validateToken(token, userDetails)){

                UsernamePasswordAuthenticationToken authToken=
                     new  UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());

               // authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                SecurityContextHolder.getContext().setAuthentication(authToken);

            }

        }
        filterChain.doFilter(request, response);
    }
	
	
	
	
	@Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(AbstractHttpConfigurer::disable)
                .cors(AbstractHttpConfigurer::disable)
                .authorizeHttpRequests(auth->
                        auth.requestMatchers("authenticate").permitAll()
                        .anyRequest().authenticated())
                .httpBasic(Customizer.withDefaults())
                .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class)
                .sessionManagement(httpSecuritySessionManagementConfigurer ->
                        httpSecuritySessionManagementConfigurer.sessionCreationPolicy(SessionCreationPolicy.STATELESS));

        return http.build();
    }
